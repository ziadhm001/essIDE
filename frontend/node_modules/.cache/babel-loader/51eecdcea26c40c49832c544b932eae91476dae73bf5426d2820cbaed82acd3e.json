{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar PropTypes = require(\"prop-types\");\nvar React = require(\"react\");\nvar split_1 = require(\"./split\");\nvar DiffMatchPatch = require(\"diff-match-patch\");\nvar DiffComponent = /** @class */function (_super) {\n  __extends(DiffComponent, _super);\n  function DiffComponent(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      value: _this.props.value\n    };\n    _this.onChange = _this.onChange.bind(_this);\n    _this.diff = _this.diff.bind(_this);\n    return _this;\n  }\n  DiffComponent.prototype.componentDidUpdate = function () {\n    var value = this.props.value;\n    if (value !== this.state.value) {\n      this.setState({\n        value: value\n      });\n    }\n  };\n  DiffComponent.prototype.onChange = function (value) {\n    this.setState({\n      value: value\n    });\n    if (this.props.onChange) {\n      this.props.onChange(value);\n    }\n  };\n  DiffComponent.prototype.diff = function () {\n    var dmp = new DiffMatchPatch();\n    var lhString = this.state.value[0];\n    var rhString = this.state.value[1];\n    if (lhString.length === 0 && rhString.length === 0) {\n      return [];\n    }\n    var diff = dmp.diff_main(lhString, rhString);\n    dmp.diff_cleanupSemantic(diff);\n    var diffedLines = this.generateDiffedLines(diff);\n    var codeEditorSettings = this.setCodeMarkers(diffedLines);\n    return codeEditorSettings;\n  };\n  DiffComponent.prototype.generateDiffedLines = function (diff) {\n    var C = {\n      DIFF_EQUAL: 0,\n      DIFF_DELETE: -1,\n      DIFF_INSERT: 1\n    };\n    var diffedLines = {\n      left: [],\n      right: []\n    };\n    var cursor = {\n      left: 1,\n      right: 1\n    };\n    diff.forEach(function (chunk) {\n      var chunkType = chunk[0];\n      var text = chunk[1];\n      var lines = text.split(\"\\n\").length - 1;\n      // diff-match-patch sometimes returns empty strings at random\n      if (text.length === 0) {\n        return;\n      }\n      var firstChar = text[0];\n      var lastChar = text[text.length - 1];\n      var linesToHighlight = 0;\n      switch (chunkType) {\n        case C.DIFF_EQUAL:\n          cursor.left += lines;\n          cursor.right += lines;\n          break;\n        case C.DIFF_DELETE:\n          // If the deletion starts with a newline, push the cursor down to that line\n          if (firstChar === \"\\n\") {\n            cursor.left++;\n            lines--;\n          }\n          linesToHighlight = lines;\n          // If the deletion does not include a newline, highlight the same line on the right\n          if (linesToHighlight === 0) {\n            diffedLines.right.push({\n              startLine: cursor.right,\n              endLine: cursor.right\n            });\n          }\n          // If the last character is a newline, we don't want to highlight that line\n          if (lastChar === \"\\n\") {\n            linesToHighlight -= 1;\n          }\n          diffedLines.left.push({\n            startLine: cursor.left,\n            endLine: cursor.left + linesToHighlight\n          });\n          cursor.left += lines;\n          break;\n        case C.DIFF_INSERT:\n          // If the insertion starts with a newline, push the cursor down to that line\n          if (firstChar === \"\\n\") {\n            cursor.right++;\n            lines--;\n          }\n          linesToHighlight = lines;\n          // If the insertion does not include a newline, highlight the same line on the left\n          if (linesToHighlight === 0) {\n            diffedLines.left.push({\n              startLine: cursor.left,\n              endLine: cursor.left\n            });\n          }\n          // If the last character is a newline, we don't want to highlight that line\n          if (lastChar === \"\\n\") {\n            linesToHighlight -= 1;\n          }\n          diffedLines.right.push({\n            startLine: cursor.right,\n            endLine: cursor.right + linesToHighlight\n          });\n          cursor.right += lines;\n          break;\n        default:\n          throw new Error(\"Diff type was not defined.\");\n      }\n    });\n    return diffedLines;\n  };\n  // Receives a collection of line numbers and iterates through them to highlight appropriately\n  // Returns an object that tells the render() method how to display the code editors\n  DiffComponent.prototype.setCodeMarkers = function (diffedLines) {\n    if (diffedLines === void 0) {\n      diffedLines = {\n        left: [],\n        right: []\n      };\n    }\n    var codeEditorSettings = [];\n    var newMarkerSet = {\n      left: [],\n      right: []\n    };\n    for (var i = 0; i < diffedLines.left.length; i++) {\n      var markerObj = {\n        startRow: diffedLines.left[i].startLine - 1,\n        endRow: diffedLines.left[i].endLine,\n        type: \"text\",\n        className: \"codeMarker\"\n      };\n      newMarkerSet.left.push(markerObj);\n    }\n    for (var i = 0; i < diffedLines.right.length; i++) {\n      var markerObj = {\n        startRow: diffedLines.right[i].startLine - 1,\n        endRow: diffedLines.right[i].endLine,\n        type: \"text\",\n        className: \"codeMarker\"\n      };\n      newMarkerSet.right.push(markerObj);\n    }\n    codeEditorSettings[0] = newMarkerSet.left;\n    codeEditorSettings[1] = newMarkerSet.right;\n    return codeEditorSettings;\n  };\n  DiffComponent.prototype.render = function () {\n    var markers = this.diff();\n    return React.createElement(split_1.default, {\n      name: this.props.name,\n      className: this.props.className,\n      focus: this.props.focus,\n      orientation: this.props.orientation,\n      splits: this.props.splits,\n      mode: this.props.mode,\n      theme: this.props.theme,\n      height: this.props.height,\n      width: this.props.width,\n      fontSize: this.props.fontSize,\n      showGutter: this.props.showGutter,\n      onChange: this.onChange,\n      onPaste: this.props.onPaste,\n      onLoad: this.props.onLoad,\n      onScroll: this.props.onScroll,\n      minLines: this.props.minLines,\n      maxLines: this.props.maxLines,\n      readOnly: this.props.readOnly,\n      highlightActiveLine: this.props.highlightActiveLine,\n      showPrintMargin: this.props.showPrintMargin,\n      tabSize: this.props.tabSize,\n      cursorStart: this.props.cursorStart,\n      editorProps: this.props.editorProps,\n      style: this.props.style,\n      scrollMargin: this.props.scrollMargin,\n      setOptions: this.props.setOptions,\n      wrapEnabled: this.props.wrapEnabled,\n      enableBasicAutocompletion: this.props.enableBasicAutocompletion,\n      enableLiveAutocompletion: this.props.enableLiveAutocompletion,\n      value: this.state.value,\n      markers: markers\n    });\n  };\n  DiffComponent.propTypes = {\n    cursorStart: PropTypes.number,\n    editorProps: PropTypes.object,\n    enableBasicAutocompletion: PropTypes.bool,\n    enableLiveAutocompletion: PropTypes.bool,\n    focus: PropTypes.bool,\n    fontSize: PropTypes.number,\n    height: PropTypes.string,\n    highlightActiveLine: PropTypes.bool,\n    maxLines: PropTypes.number,\n    minLines: PropTypes.number,\n    mode: PropTypes.string,\n    name: PropTypes.string,\n    className: PropTypes.string,\n    onLoad: PropTypes.func,\n    onPaste: PropTypes.func,\n    onScroll: PropTypes.func,\n    onChange: PropTypes.func,\n    orientation: PropTypes.string,\n    readOnly: PropTypes.bool,\n    scrollMargin: PropTypes.array,\n    setOptions: PropTypes.object,\n    showGutter: PropTypes.bool,\n    showPrintMargin: PropTypes.bool,\n    splits: PropTypes.number,\n    style: PropTypes.object,\n    tabSize: PropTypes.number,\n    theme: PropTypes.string,\n    value: PropTypes.array,\n    width: PropTypes.string,\n    wrapEnabled: PropTypes.bool\n  };\n  DiffComponent.defaultProps = {\n    cursorStart: 1,\n    editorProps: {},\n    enableBasicAutocompletion: false,\n    enableLiveAutocompletion: false,\n    focus: false,\n    fontSize: 12,\n    height: \"500px\",\n    highlightActiveLine: true,\n    maxLines: null,\n    minLines: null,\n    mode: \"\",\n    name: \"ace-editor\",\n    onLoad: null,\n    onScroll: null,\n    onPaste: null,\n    onChange: null,\n    orientation: \"beside\",\n    readOnly: false,\n    scrollMargin: [0, 0, 0, 0],\n    setOptions: {},\n    showGutter: true,\n    showPrintMargin: true,\n    splits: 2,\n    style: {},\n    tabSize: 4,\n    theme: \"github\",\n    value: [\"\", \"\"],\n    width: \"500px\",\n    wrapEnabled: true\n  };\n  return DiffComponent;\n}(React.Component);\nexports.default = DiffComponent;","map":{"version":3,"mappings":"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","names":["DiffMatchPatch","require","__extends","props","_super","_this","state","value","onChange","bind","diff","DiffComponent","setState","dmp","lhString","rhString","length","diff_main","diff_cleanupSemantic","diffedLines","generateDiffedLines","codeEditorSettings","setCodeMarkers","C","DIFF_EQUAL","DIFF_DELETE","DIFF_INSERT","left","right","cursor","forEach","chunk","chunkType","text","lines","split","firstChar","lastChar","linesToHighlight","push","startLine","endLine","Error","newMarkerSet","i","markerObj","startRow","endRow","type","className","markers","React","split_1","name","focus","orientation","splits","mode","theme","height","width","fontSize","showGutter","onPaste","onLoad","onScroll","minLines","maxLines","readOnly","highlightActiveLine","showPrintMargin","tabSize","cursorStart","editorProps","style","scrollMargin","setOptions","wrapEnabled","enableBasicAutocompletion","enableLiveAutocompletion","PropTypes","number","object","bool","string","func","array","Component"],"sources":["E:\\project\\essIDE\\frontend\\node_modules\\react-ace\\src\\diff.tsx"],"sourcesContent":["import * as PropTypes from \"prop-types\";\r\nimport * as React from \"react\";\r\nimport SplitEditor from \"./split\";\r\nconst DiffMatchPatch = require(\"diff-match-patch\");\r\nimport { IEditorProps } from \"./types\";\r\n\r\nexport interface IDiffEditorProps {\r\n  cursorStart?: number;\r\n  editorProps?: object;\r\n  enableBasicAutocompletion?: boolean | string[];\r\n  enableLiveAutocompletion?: boolean | string[];\r\n  focus?: boolean;\r\n  fontSize?: number;\r\n  height?: string;\r\n  highlightActiveLine?: boolean;\r\n  maxLines?: number;\r\n  minLines?: number;\r\n  mode?: string;\r\n  name?: string;\r\n  className?: string;\r\n  onLoad?: (editor: IEditorProps) => void;\r\n  onChange?: (value: string[], event?: any) => void;\r\n  onPaste?: (value: string) => void;\r\n  onScroll?: (editor: IEditorProps) => void;\r\n  orientation?: string;\r\n  readOnly?: boolean;\r\n  scrollMargin?: number[];\r\n  setOptions?: object;\r\n  showGutter?: boolean;\r\n  showPrintMargin?: boolean;\r\n  splits?: number;\r\n  style?: object;\r\n  tabSize?: number;\r\n  theme?: string;\r\n  value?: string[];\r\n  width?: string;\r\n  wrapEnabled?: boolean;\r\n}\r\n\r\nexport interface IDiffEditorState {\r\n  value: string[];\r\n}\r\n\r\nexport default class DiffComponent extends React.Component<\r\n  IDiffEditorProps,\r\n  IDiffEditorState\r\n> {\r\n  public static propTypes: PropTypes.ValidationMap<IDiffEditorProps> = {\r\n    cursorStart: PropTypes.number,\r\n    editorProps: PropTypes.object,\r\n    enableBasicAutocompletion: PropTypes.bool,\r\n    enableLiveAutocompletion: PropTypes.bool,\r\n    focus: PropTypes.bool,\r\n    fontSize: PropTypes.number,\r\n    height: PropTypes.string,\r\n    highlightActiveLine: PropTypes.bool,\r\n    maxLines: PropTypes.number,\r\n    minLines: PropTypes.number,\r\n    mode: PropTypes.string,\r\n    name: PropTypes.string,\r\n    className: PropTypes.string,\r\n    onLoad: PropTypes.func,\r\n    onPaste: PropTypes.func,\r\n    onScroll: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    orientation: PropTypes.string,\r\n    readOnly: PropTypes.bool,\r\n    scrollMargin: PropTypes.array,\r\n    setOptions: PropTypes.object,\r\n    showGutter: PropTypes.bool,\r\n    showPrintMargin: PropTypes.bool,\r\n    splits: PropTypes.number,\r\n    style: PropTypes.object,\r\n    tabSize: PropTypes.number,\r\n    theme: PropTypes.string,\r\n    value: PropTypes.array,\r\n    width: PropTypes.string,\r\n    wrapEnabled: PropTypes.bool\r\n  };\r\n\r\n  public static defaultProps: Partial<IDiffEditorProps> = {\r\n    cursorStart: 1,\r\n    editorProps: {},\r\n    enableBasicAutocompletion: false,\r\n    enableLiveAutocompletion: false,\r\n    focus: false,\r\n    fontSize: 12,\r\n    height: \"500px\",\r\n    highlightActiveLine: true,\r\n    maxLines: null,\r\n    minLines: null,\r\n    mode: \"\",\r\n    name: \"ace-editor\",\r\n    onLoad: null,\r\n    onScroll: null,\r\n    onPaste: null,\r\n    onChange: null,\r\n    orientation: \"beside\",\r\n    readOnly: false,\r\n    scrollMargin: [0, 0, 0, 0],\r\n    setOptions: {},\r\n    showGutter: true,\r\n    showPrintMargin: true,\r\n    splits: 2,\r\n    style: {},\r\n    tabSize: 4,\r\n    theme: \"github\",\r\n    value: [\"\", \"\"],\r\n    width: \"500px\",\r\n    wrapEnabled: true\r\n  };\r\n  constructor(props: IDiffEditorProps) {\r\n    super(props);\r\n    this.state = {\r\n      value: this.props.value\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.diff = this.diff.bind(this);\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    const { value } = this.props;\r\n\r\n    if (value !== this.state.value) {\r\n      this.setState({ value });\r\n    }\r\n  }\r\n\r\n  public onChange(value: any) {\r\n    this.setState({\r\n      value\r\n    });\r\n    if (this.props.onChange) {\r\n      this.props.onChange(value);\r\n    }\r\n  }\r\n\r\n  public diff() {\r\n    const dmp = new DiffMatchPatch();\r\n    const lhString = this.state.value[0];\r\n    const rhString = this.state.value[1];\r\n\r\n    if (lhString.length === 0 && rhString.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const diff = dmp.diff_main(lhString, rhString);\r\n    dmp.diff_cleanupSemantic(diff);\r\n\r\n    const diffedLines = this.generateDiffedLines(diff);\r\n    const codeEditorSettings = this.setCodeMarkers(diffedLines);\r\n    return codeEditorSettings;\r\n  }\r\n\r\n  public generateDiffedLines(diff: any) {\r\n    const C = {\r\n      DIFF_EQUAL: 0,\r\n      DIFF_DELETE: -1,\r\n      DIFF_INSERT: 1\r\n    };\r\n\r\n    const diffedLines = {\r\n      left: [] as any[],\r\n      right: [] as any[]\r\n    };\r\n\r\n    const cursor = {\r\n      left: 1,\r\n      right: 1\r\n    };\r\n\r\n    diff.forEach((chunk: any) => {\r\n      const chunkType = chunk[0];\r\n      const text = chunk[1];\r\n      let lines = text.split(\"\\n\").length - 1;\r\n\r\n      // diff-match-patch sometimes returns empty strings at random\r\n      if (text.length === 0) {\r\n        return;\r\n      }\r\n\r\n      const firstChar = text[0];\r\n      const lastChar = text[text.length - 1];\r\n      let linesToHighlight = 0;\r\n\r\n      switch (chunkType) {\r\n        case C.DIFF_EQUAL:\r\n          cursor.left += lines;\r\n          cursor.right += lines;\r\n\r\n          break;\r\n        case C.DIFF_DELETE:\r\n          // If the deletion starts with a newline, push the cursor down to that line\r\n          if (firstChar === \"\\n\") {\r\n            cursor.left++;\r\n            lines--;\r\n          }\r\n\r\n          linesToHighlight = lines;\r\n\r\n          // If the deletion does not include a newline, highlight the same line on the right\r\n          if (linesToHighlight === 0) {\r\n            diffedLines.right.push({\r\n              startLine: cursor.right,\r\n              endLine: cursor.right\r\n            });\r\n          }\r\n\r\n          // If the last character is a newline, we don't want to highlight that line\r\n          if (lastChar === \"\\n\") {\r\n            linesToHighlight -= 1;\r\n          }\r\n\r\n          diffedLines.left.push({\r\n            startLine: cursor.left,\r\n            endLine: cursor.left + linesToHighlight\r\n          });\r\n\r\n          cursor.left += lines;\r\n          break;\r\n        case C.DIFF_INSERT:\r\n          // If the insertion starts with a newline, push the cursor down to that line\r\n          if (firstChar === \"\\n\") {\r\n            cursor.right++;\r\n            lines--;\r\n          }\r\n\r\n          linesToHighlight = lines;\r\n\r\n          // If the insertion does not include a newline, highlight the same line on the left\r\n          if (linesToHighlight === 0) {\r\n            diffedLines.left.push({\r\n              startLine: cursor.left,\r\n              endLine: cursor.left\r\n            });\r\n          }\r\n\r\n          // If the last character is a newline, we don't want to highlight that line\r\n          if (lastChar === \"\\n\") {\r\n            linesToHighlight -= 1;\r\n          }\r\n\r\n          diffedLines.right.push({\r\n            startLine: cursor.right,\r\n            endLine: cursor.right + linesToHighlight\r\n          });\r\n\r\n          cursor.right += lines;\r\n          break;\r\n        default:\r\n          throw new Error(\"Diff type was not defined.\");\r\n      }\r\n    });\r\n    return diffedLines;\r\n  }\r\n\r\n  // Receives a collection of line numbers and iterates through them to highlight appropriately\r\n  // Returns an object that tells the render() method how to display the code editors\r\n  public setCodeMarkers(diffedLines: any = { left: [], right: [] }) {\r\n    const codeEditorSettings = [];\r\n\r\n    const newMarkerSet = {\r\n      left: [] as any[],\r\n      right: [] as any[]\r\n    };\r\n\r\n    for (let i = 0; i < diffedLines.left.length; i++) {\r\n      const markerObj = {\r\n        startRow: diffedLines.left[i].startLine - 1,\r\n        endRow: diffedLines.left[i].endLine,\r\n        type: \"text\",\r\n        className: \"codeMarker\"\r\n      };\r\n      newMarkerSet.left.push(markerObj);\r\n    }\r\n\r\n    for (let i = 0; i < diffedLines.right.length; i++) {\r\n      const markerObj = {\r\n        startRow: diffedLines.right[i].startLine - 1,\r\n        endRow: diffedLines.right[i].endLine,\r\n        type: \"text\",\r\n        className: \"codeMarker\"\r\n      };\r\n      newMarkerSet.right.push(markerObj);\r\n    }\r\n\r\n    codeEditorSettings[0] = newMarkerSet.left;\r\n    codeEditorSettings[1] = newMarkerSet.right;\r\n\r\n    return codeEditorSettings;\r\n  }\r\n\r\n  public render() {\r\n    const markers = this.diff();\r\n    return (\r\n      <SplitEditor\r\n        name={this.props.name}\r\n        className={this.props.className}\r\n        focus={this.props.focus}\r\n        orientation={this.props.orientation}\r\n        splits={this.props.splits}\r\n        mode={this.props.mode}\r\n        theme={this.props.theme}\r\n        height={this.props.height}\r\n        width={this.props.width}\r\n        fontSize={this.props.fontSize}\r\n        showGutter={this.props.showGutter}\r\n        onChange={this.onChange}\r\n        onPaste={this.props.onPaste}\r\n        onLoad={this.props.onLoad}\r\n        onScroll={this.props.onScroll}\r\n        minLines={this.props.minLines}\r\n        maxLines={this.props.maxLines}\r\n        readOnly={this.props.readOnly}\r\n        highlightActiveLine={this.props.highlightActiveLine}\r\n        showPrintMargin={this.props.showPrintMargin}\r\n        tabSize={this.props.tabSize}\r\n        cursorStart={this.props.cursorStart}\r\n        editorProps={this.props.editorProps}\r\n        style={this.props.style}\r\n        scrollMargin={this.props.scrollMargin}\r\n        setOptions={this.props.setOptions}\r\n        wrapEnabled={this.props.wrapEnabled}\r\n        enableBasicAutocompletion={this.props.enableBasicAutocompletion}\r\n        enableLiveAutocompletion={this.props.enableLiveAutocompletion}\r\n        value={this.state.value}\r\n        markers={markers}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}