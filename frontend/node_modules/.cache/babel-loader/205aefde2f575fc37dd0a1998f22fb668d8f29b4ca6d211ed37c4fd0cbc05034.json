{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAceInstance = exports.debounce = exports.editorEvents = exports.editorOptions = void 0;\nvar editorOptions = [\"minLines\", \"maxLines\", \"readOnly\", \"highlightActiveLine\", \"tabSize\", \"enableBasicAutocompletion\", \"enableLiveAutocompletion\", \"enableSnippets\"];\nexports.editorOptions = editorOptions;\nvar editorEvents = [\"onChange\", \"onFocus\", \"onInput\", \"onBlur\", \"onCopy\", \"onPaste\", \"onSelectionChange\", \"onCursorChange\", \"onScroll\", \"handleOptions\", \"updateRef\"];\nexports.editorEvents = editorEvents;\nvar getAceInstance = function () {\n  var ace;\n  if (typeof window === \"undefined\") {\n    // ace-builds just needs some window object to attach ace to.\n    // During SSR even just an empty object will work.\n    global.window = {};\n    ace = require(\"ace-builds\");\n    // And it can be discarded immediately afterward to avoid confusing\n    // other libraries that might detect SSR the same way we did.\n    delete global.window;\n  } else if (window.ace) {\n    // Fallback for ace.require when vanilla ACE is hosted over a CDN\n    ace = window.ace;\n    ace.acequire = window.ace.require || window.ace.acequire;\n  } else {\n    ace = require(\"ace-builds\");\n  }\n  return ace;\n};\nexports.getAceInstance = getAceInstance;\nvar debounce = function (fn, delay) {\n  var timer = null;\n  // tslint:disable-next-line\n  return function () {\n    var context = this;\n    var args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\nexports.debounce = debounce;","map":{"version":3,"mappings":";;;;;;AAYA,IAAMA,aAAa,GAAmB,CACpC,UAAU,EACV,UAAU,EACV,UAAU,EACV,qBAAqB,EACrB,SAAS,EACT,2BAA2B,EAC3B,0BAA0B,EAC1B,gBAAgB,CACjB;AAsEQC;AAvDT,IAAMC,YAAY,GAAkB,CAClC,UAAU,EACV,SAAS,EACT,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,mBAAmB,EACnB,gBAAgB,EAChB,UAAU,EACV,eAAe,EACf,WAAW,CACZ;AA2CuBD;AAhCxB,IAAME,cAAc,GAAG;EACrB,IAAIC,GAAG;EACP,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IACjC;IACA;IACAC,MAAM,CAACD,MAAM,GAAG,EAAE;IAClBD,GAAG,GAAGG,OAAO,CAAC,YAAY,CAAC;IAC3B;IACA;IACA,OAAOD,MAAM,CAACD,MAAM;GACrB,MAAM,IAAKA,MAAc,CAACD,GAAG,EAAE;IAC9B;IACAA,GAAG,GAAIC,MAAc,CAACD,GAAG;IACzBA,GAAG,CAACI,QAAQ,GAAIH,MAAc,CAACD,GAAG,CAACG,OAAO,IAAKF,MAAc,CAACD,GAAG,CAACI,QAAQ;GAC3E,MAAM;IACLJ,GAAG,GAAGG,OAAO,CAAC,YAAY,CAAC;;EAE7B,OAAOH,GAAG;AACZ,CAAC;AAc+CH;AAZhD,IAAMQ,QAAQ,GAAG,UAACC,EAA4B,EAAEC,KAAa;EAC3D,IAAIC,KAAK,GAAQ,IAAI;EACrB;EACA,OAAO;IACL,IAAMC,OAAO,GAAG,IAAI;IACpB,IAAMC,IAAI,GAAGC,SAAS;IACtBC,YAAY,CAACJ,KAAK,CAAC;IACnBA,KAAK,GAAGK,UAAU,CAAC;MACjBP,EAAE,CAACQ,KAAK,CAACL,OAAO,EAAEC,IAAI,CAAC;IACzB,CAAC,EAAEH,KAAK,CAAC;EACX,CAAC;AACH,CAAC;AACqCV","names":["editorOptions","exports","editorEvents","getAceInstance","ace","window","global","require","acequire","debounce","fn","delay","timer","context","args","arguments","clearTimeout","setTimeout","apply"],"sources":["E:\\project\\essIDE\\frontend\\node_modules\\react-ace\\src\\editorOptions.ts"],"sourcesContent":["import * as AceBuilds from \"ace-builds\";\r\n\r\ntype EditorOption =\r\n  | \"minLines\"\r\n  | \"maxLines\"\r\n  | \"readOnly\"\r\n  | \"highlightActiveLine\"\r\n  | \"tabSize\"\r\n  | \"enableBasicAutocompletion\"\r\n  | \"enableLiveAutocompletion\"\r\n  | \"enableSnippets\";\r\n\r\nconst editorOptions: EditorOption[] = [\r\n  \"minLines\",\r\n  \"maxLines\",\r\n  \"readOnly\",\r\n  \"highlightActiveLine\",\r\n  \"tabSize\",\r\n  \"enableBasicAutocompletion\",\r\n  \"enableLiveAutocompletion\",\r\n  \"enableSnippets\"\r\n];\r\n\r\ntype EditorEvent =\r\n  | \"onChange\"\r\n  | \"onFocus\"\r\n  | \"onInput\"\r\n  | \"onBlur\"\r\n  | \"onCopy\"\r\n  | \"onPaste\"\r\n  | \"onSelectionChange\"\r\n  | \"onCursorChange\"\r\n  | \"onScroll\"\r\n  | \"handleOptions\"\r\n  | \"updateRef\";\r\n\r\nconst editorEvents: EditorEvent[] = [\r\n  \"onChange\",\r\n  \"onFocus\",\r\n  \"onInput\",\r\n  \"onBlur\",\r\n  \"onCopy\",\r\n  \"onPaste\",\r\n  \"onSelectionChange\",\r\n  \"onCursorChange\",\r\n  \"onScroll\",\r\n  \"handleOptions\",\r\n  \"updateRef\"\r\n];\r\n\r\n// Typescript globals definition to allow us to create a window object during SSR.\r\ndeclare global {\r\n  namespace NodeJS {\r\n    // tslint:disable-next-line\r\n    interface Global {\r\n      window: any;\r\n    }\r\n  }\r\n}\r\nconst getAceInstance = (): typeof AceBuilds => {\r\n  let ace;\r\n  if (typeof window === \"undefined\") {\r\n    // ace-builds just needs some window object to attach ace to.\r\n    // During SSR even just an empty object will work.\r\n    global.window = {};\r\n    ace = require(\"ace-builds\");\r\n    // And it can be discarded immediately afterward to avoid confusing\r\n    // other libraries that might detect SSR the same way we did.\r\n    delete global.window;\r\n  } else if ((window as any).ace) {\r\n    // Fallback for ace.require when vanilla ACE is hosted over a CDN\r\n    ace = (window as any).ace;\r\n    ace.acequire = (window as any).ace.require || (window as any).ace.acequire;\r\n  } else {\r\n    ace = require(\"ace-builds\");\r\n  }\r\n  return ace;\r\n};\r\n\r\nconst debounce = (fn: (...args: any[]) => void, delay: number) => {\r\n  let timer: any = null;\r\n  // tslint:disable-next-line\r\n  return function () {\r\n    const context = this;\r\n    const args = arguments;\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      fn.apply(context, args);\r\n    }, delay);\r\n  };\r\n};\r\nexport { editorOptions, editorEvents, debounce, getAceInstance };\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}