{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useContext } from 'react';\nimport Axios from 'axios';\nimport { useAuthContext } from './useAuthContext';\nexport const useSignup = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const {\n    dispatch\n  } = useAuthContext();\n  const signup = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    const response = await fetch('/api/user/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const json = await response.json();\n    if (!response.ok) {\n      setIsLoading(false);\n      setError(json.error);\n    }\n    if (response.ok) {\n      // save the user to local storage\n      localStorage.setItem('user', JSON.stringify(json));\n\n      // update the auth context\n      dispatch({\n        type: 'LOGIN',\n        payload: json\n      });\n\n      // update loading state\n      setIsLoading(false);\n    }\n  };\n  return {\n    signup,\n    isLoading,\n    error\n  };\n};\n_s(useSignup, \"2o2oUdrJP220M1JG8l7hQABh7Ks=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","useContext","Axios","useAuthContext","useSignup","error","setError","isLoading","setIsLoading","dispatch","signup","email","password","response","fetch","method","headers","body","JSON","stringify","json","ok","localStorage","setItem","type","payload"],"sources":["D:/Ziad/projects/IDE/frontend/src/components/hooks/useSignup.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useContext } from 'react';\r\nimport Axios from 'axios';\r\nimport { useAuthContext } from './useAuthContext';\r\n\r\n\r\nexport const useSignup = () => {\r\n    const [error, setError] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(null);\r\n    const { dispatch }  =  useAuthContext()\r\n\r\n    const signup = async (email, password) => {\r\n        setIsLoading(true)\r\n        setError(null)\r\n    \r\n        const response = await fetch('/api/user/signup', {\r\n          method: 'POST',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({ email, password })\r\n        })\r\n        const json = await response.json()\r\n    \r\n        if (!response.ok) {\r\n          setIsLoading(false)\r\n          setError(json.error)\r\n        }\r\n        if (response.ok) {\r\n          // save the user to local storage\r\n          localStorage.setItem('user', JSON.stringify(json))\r\n    \r\n          // update the auth context\r\n          dispatch({type: 'LOGIN', payload: json})\r\n    \r\n          // update loading state\r\n          setIsLoading(false)\r\n        }\r\n      }\r\n    \r\n    return { signup, isLoading, error}\r\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,kBAAkB;AAGjD,OAAO,MAAMC,SAAS,GAAG,MAAM;EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAES;EAAS,CAAC,GAAKN,cAAc,EAAE;EAEvC,MAAMO,MAAM,GAAG,OAAOC,KAAK,EAAEC,QAAQ,KAAK;IACtCJ,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;MAC/CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;IACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,EAAE;IAElC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChBb,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAACc,IAAI,CAACf,KAAK,CAAC;IACtB;IACA,IAAIQ,QAAQ,CAACQ,EAAE,EAAE;MACf;MACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC;;MAElD;MACAX,QAAQ,CAAC;QAACe,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEL;MAAI,CAAC,CAAC;;MAExC;MACAZ,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAEH,OAAO;IAAEE,MAAM;IAAEH,SAAS;IAAEF;EAAK,CAAC;AACtC,CAAC;AAAA,GAjCYD,SAAS;EAAA,QAGKD,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}